services:
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    volumes:
      # Persistence data (mount to docker's host filesystem)
      - elasticsearch_data:/usr/share/elasticsearch/data:rw              
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      ELASTIC_USERNAME: "elastic"
      ELASTIC_PASSWORD: "MyPw123"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
      xpack.security.enabled: false
    networks:
      - elk

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.5.3
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    # volumes:
    #   - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    # restart: on-failure      
    depends_on:
      - elasticsearch
    networks:
      - elk

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.5.3
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/config/logstash.conf:ro
      # - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - 25826:25826
      - 5044:5044
      - 9600:9600
      - 5000:5000/tcp
      - 5000:5000/udp
    environment:
      LS_JAVA_OPTS: "-Xms1g -Xmx1g"
      xpack.monitoring.enabled: true
      xpack.monitoring.elasticsearch.username: "elastic"
      xpack.monitoring.elasticsearch.password: "MyPw123"
      xpack.monitoring.elasticsearch.hosts: http://elasticsearch:9200
    # restart: on-failure      
    depends_on:
      - elasticsearch
    networks:
      - elk

  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:8.5.3
    volumes:
      - ./filebeat/filebeat.logstash.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file, must run (chown 0) to be root to work
      - /var/lib/docker/containers:/var/lib/docker/containers           # Docker logs
      - /var/run/docker.sock:/var/run/docker.sock                       # Additional information about containers
      - filebeat_data:/usr/share/filebeat/data                        # Persistence data
    # Allow access to log files and docker.sock
    user: root
    # restart: on-failure
    networks:
      - elk
    depends_on:
      - elasticsearch
      - logstash

  log-service:
    container_name: log-service
    build:
      context: spring-log-elk-sleuth-zipkin
      dockerfile: Dockerfile
    image: log-app:latest
    ports:
      - 8090:8090
      - 8001:8001
    networks:
      - elk
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

networks:
  elk:
    #The default network driver is bridge but containers on default will not able t oconnect each other
    # BUT In user defined bridge the containers can communicate with their name
    driver: bridge
    name: BELK

volumes:
  elasticsearch_data:
  filebeat_data: